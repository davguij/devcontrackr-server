type Conference {
	id: ID!
	name: String!
	description: String!
	# dates should be in proper date format?
	dates: [String!]!
	# topics should be an enum?
	topics: [String!]!
	last_modified: Modif!
	# languages should be in ISO format
	languages: [String!]!
	tickets: [Ticket]
	# WebPresence to include homepage!, twitter profile, agenda page and tickets page
	web_presence: WebPresence!
	location: Location!
	speakers: [Speaker]
	# organizer and sponsors should include some more info?
	organizer: String
	sponsors: [String]
}

type RootQuery {
	conferences: [Conference]
	conference(id: ID!): Conference
	# TODO can we move the speakers queries to its own typedef file
	speakers: [Speaker]
	speaker(id: ID!): Speaker
}

input CreateConferenceInput {
	name: String!
	description: String!
	dates: [String!]!
	topics: [String!]!
	languages: [String!]!
	tickets: [CreateTicketInput]
	web_presence: CreateWebPresenceInput!
	location: CreateLocationInput!
	speakers: [ID!]
	organizer: String
	sponsors: [String]
}

input UpdateConferenceInput {
	id: ID!
	name: String
	description: String
	dates: [String]
	topics: [String]
	languages: [String]
	tickets: [CreateTicketInput]
	web_presence: CreateWebPresenceInput
	location: CreateLocationInput
	speakers: [ID!]
	organizer: String
	sponsors: [String]
}

type RootMutation {
	createConference(input: CreateConferenceInput!): Conference
	updateConference(input: UpdateConferenceInput!): Conference
	createSpeaker(input: CreateSpeakerInput!): Speaker
	updateSpeaker(input: UpdateSpeakerInput!): Speaker
}

schema {
	query: RootQuery
	mutation: RootMutation
}
